
/* This work is protected by the CERN-OHL-P-2.0 open source license, for more information about the terms of this agreement please visit: 
   ****************************************** https://ohwr.org/cern_ohl_p_v2.txt ******************************************DoYouSeeIt?*_* 
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000011111111000000000000000111111110000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000001111111111111111100000001111111111111111100000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000111111111111111111111000111111111111111111111000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000011111111111111111111111101111111111111111111111110000000000000000000000000000000000000000000000000
   00000000000000000000000000000000001111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000
   00000000000000000000000000000000011111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000
   00000000000000000000000000000000111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000
   00000000000000000000000000000001111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000
   00000000000000000000000000000011111111110000001111111111111111111111111100000011111111111110000000000000000000000000000000000000000000
   00000000000000000000000000000111111111000000000001111111111111111111100000000000111111111111000000000000000000000000000000000000000000
   00000000000000000000000000001111111110000000000000011111111111111111000000000000001111111111100000000000000000000000000000000000000000
   00000000000000000000000000011111111100000000000000000111111111111100000000000000000011111111110000000000000000000000000000000000000000
   00000000000000000000000000011111111100000000000000000000000000000000000000000000000011111111110000000000000000000000000000000000000000
   00000000000000000000000000111111111000000000000000000000000000000000000000000000000001111111111000000000000000000000000000000000000000
   00000000000000000000000000111111110000000000000000000000000000000000000000000000000000111111111000000000000000000000000000000000000000
   00000000000000000000000000111111110000000000000000000000000000000000000000000000000000111111111000000000000000000000000000000000000000
   00000000000000000000000000111111110000000000000000011111111111111111000000000000000000111111111000000000000000000000000000000000000000
   00000000000000000000000000111111110000000001111111111111111111111111111111100000000000111111111000000000000000000000000000000000000000
   00000000000000000000000001111111100000001111111111111111111111111111111111111100000000011111111100000000000000000000000000000000000000
   00000000000000000000000001111111100000111111111111111111111111111111111111111111000000011111111100000000000000000000000000000000000000
   00000000000000000000000011111111000001111111111111111111111111111111111111111111100000001111111110000000000000000000000000000000000000
   00000000000000000000000011111111000011111111111111111111111111111111111111111111110000001111111110000000000000000000000000000000000000
   00000000000000000000000011111110000011111111111111111111111111111111111111111111110000000111111110000000000000000000000000000000000000
   00000000000000000000000011111110000111111110000111111111111111111111110000111111111000000111111110000000000000000000000000000000000000
   00000000000000000000000011111110001111111110000000000000111111111000000000001111111100000111111110000000000000000000000000000000000000
   00000000000000000000000011111110001111111100000000000000000000000000000000000111111100000111111110000000000000000000000000000000000000
   00000000000000000000000011111110001111111100000000000000000000000000000000000111111100000111111110000000000000000000000000000000000000
   00000000000000000000000011111110001111111000000000000000000000000000000000000011111100000111111110000000000000000000000000000000000000
   00000000000000000000000001111110001111111100000000000000000000000000000000000111111100000111111100000000000000000000000000000000000000
   00000000000000000000000001111111001111111100000000000000000000000000000000000111111100001111111100000000000000000000000000000000000000
   00000000000000000000000001111111001111111110000000000000000000000000000000001111111000001111111100000000000000000000000000000000000000
   00000000000000000000000000111111001111111111000000000000000000000000000000011111111000001111111000000000000000000000000000000000000000
   00000000000000000000000000111111100111111111100000000000000000000000000000111111111000011111111000000000000000000000000000000000000000
   00000000000000000000000000011111110111111111111000000000000000000000000011111111110000011111110000000000000000000000000000000000000000
   00000000000000000000000000011111110011111111111111000000000000000000111111111111100000111111110000000000000000000000000000000000000000
   00000000000000000000000000001111111001111111111111111111000011111111111111111111000000111111100000000000000000000000000000000000000000
   00000000000000000000000000000111111100111111111111111111111111111111111111111110000001111111000000000000000000000000000000000000000000
   00000000000000000000000000000011111110011111111111111111111111111111111111111000000011111110000000000000000000000000000000000000000000
   00000000000000000000000000000001111111001111111111111111111111111111111111100000000111111100000000000000000000000000000000000000000000
   00000000000000000000000000000000111111100011111111111111111111111111111110000000001111111000000000000000000000000000000000000000000000
   00000000000000000000000000000000001111111000111111111111111111111111110000000000011111100000000000000000000000000000000000000000000000
   00000000000000000000000000000000000011111110001111111111111111111110000000000001111111000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000001111111100000111111111111000000000000000111111100000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000011111111000000000000000000000000000011111110000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000111111110000000000000000000000001111111000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000001111111100000000000000000000111111100000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000011111111100000000000000111111110000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000011111111110000001111111110000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000011111111111111111110000000000000000000000000000000000000000000000000000000000000000
   00000000000000000000000000000000000000000000000000000001111111111110000000000000000000000000000000000000000000000000000 -XroSilence */
   //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//@version=5
strategy("Transcendent Crypto Oracle Lite", overlay=true, max_bars_back=432, calc_on_every_tick=true, initial_capital=100000, pyramiding=3, margin_long=20, margin_short=20, default_qty_type=strategy.percent_of_equity, default_qty_value=2, commission_type=strategy.commission.percent, commission_value=0.1)
/* ===================
   INPUTS & SETTINGS
   =================== */

// ----------------- Feature Selection Inputs -----------------
enable_rsi          = input.bool(false, "Enable RSI Strategy",       group="Feature Selection")
enable_macd         = input.bool(false, "Enable MACD Strategy",      group="Feature Selection")
enable_heikinashi   = input.bool(false, "Enable Heikin Ashi",        group="Feature Selection")
enable_bbands       = input.bool(false, "Enable Bollinger Bands",    group="Feature Selection")
enable_sentiment    = input.bool(false, "Enable Sentiment Analysis", group="Feature Selection")
enable_smoothing    = input.bool(false, "Enable Price Smoothing",    group="Feature Selection")

// ----------------- Auxiliary Features -----------------
i_useHeikinAshi        = input.bool(false, "Transcend Traditional Candles", group="Other Settings")
i_useMarketProfile     = input.bool(false, "Market Profile Consciousness",  group="Other Settings")
i_useElliot            = input.bool(false, "Elliot Wave Manifestation",     group="Other Settings")
i_useWyckoff           = input.bool(false, "Wyckoff Method Integration",    group="Other Settings")
i_sentimentAwareness   = input.bool(false, "Vibe Perception",               group="Other Settings")
i_sentimentSensitivity = input.float(1.0, "Vibe Intensity",                 group="Other Settings")
i_enableDeepVisualization = input.bool(false, "Enable Deep Visualization",  group="Other Settings")

// ----------------- Timeframe Inputs -----------------
i_primaryTF   = input.timeframe("15", "Primary Timeline",   group="Timeframes")
i_secondaryTF = input.timeframe("60", "Secondary Timeline", group="Timeframes")
i_tertiaryTF  = input.timeframe("D",  "Tertiary Timeline",  group="Timeframes")
// Additional TF inputs for indicators:
i_rsiTF  = input.timeframe("", "RSI Timeframe (empty=chart TF)", group="Timeframes")
i_macdTF = input.timeframe("", "MACD Timeframe (empty=chart TF)", group="Timeframes")
i_bbTF   = input.timeframe("", "Bollinger Bands (empty=chart TF)", group="Timeframes")

// ----------------- RSI Inputs -----------------
i_rsiLength = input.int(14,  "RSI Length",      minval=1,  group="RSI Settings")
i_rsiOB     = input.float(70,"RSI Overbought",  minval=50, group="RSI Settings")
i_rsiOS     = input.float(30,"RSI Oversold",    maxval=50, group="RSI Settings")

// ----------------- MACD Inputs -----------------
i_macdFast   = input.int(12, "MACD Fast",   group="MACD Settings")
i_macdSlow   = input.int(26, "MACD Slow",   group="MACD Settings")
i_macdSignal = input.int(9,  "MACD Signal", group="MACD Settings")

// ----------------- Bollinger Bands Inputs -----------------
bb_length = input.int(20, "BB Length", minval=1, group="Bollinger Bands Settings")
bb_mult   = input.float(2.0, "BB StdDev Multiplier", minval=0.1, step=0.1, group="Bollinger Bands Settings")
bb_offset = input.float(0.0, "BB Offset", minval=-100, maxval=100, step=0.1, group="Bollinger Bands Settings")

// ----------------- Smoothing Inputs -----------------
smooth_length   = input.int(3,   "Smoothing Period",  minval=1, maxval=50, group="Smoothing Settings")
vol_threshold   = input.float(1.5,"Volatility Multiplier", minval=1.0, step=0.1, group="Smoothing Settings")
use_weighted    = input.bool(false, "Use Weighted Average", group="Smoothing Settings")
hull_length     = input.int(4,    "Hull MA Length",  minval=2, group="Smoothing Settings")

// ----------------- Risk Management Inputs -----------------
tp_roi = input.float(1.50, "Take Profit ROI %", minval=0.01, maxval=100.00, step=0.01, group="Risk Management")
sl_roi = input.float(0.75, "Stop Loss ROI %",  minval=0.01, maxval=100.00, step=0.01, group="Risk Management")

// ----------------- Line Style & Color Inputs -----------------
col_bbBasis = input.color(color.new(color.blue, 50), "BB Middle Color", group="Line Settings")
col_bbUpper = input.color(color.new(color.blue, 30), "BB Upper Color",  group="Line Settings")
col_bbLower = input.color(color.new(color.blue, 30), "BB Lower Color",  group="Line Settings")
col_fastMA  = input.color(color.blue,  "Fast MA Color", group="Line Settings")
col_slowMA  = input.color(color.purple,"Slow MA Color", group="Line Settings")
bb_style    = input.string("Solid", "BB Line Style", options=["Solid","Dashed","Dotted"], group="Line Settings")
ma_lineWidth = input.int(1, "MA Line Width", minval=1, maxval=5, group="Line Settings")
bb_lineWidth = input.int(1, "BB Line Width", minval=1, maxval=5, group="Line Settings")

/* ===================
   CALCULATIONS
   =================== */

// Functions to get security data with optional custom TF
fSec(source, tf) =>
    tf == "" ? source : request.security(syminfo.tickerid, tf, source)

// Price Calculations
smoothed_price = close
if enable_smoothing
    smooth_sma = ta.sma(close, smooth_length)
    smooth_ema = ta.ema(close, smooth_length)
    smooth_wma = ta.wma(close, smooth_length)
    hull_ma    = ta.hma(close, hull_length)
    smoothed_price := use_weighted ? smooth_wma : smooth_sma

// ATR
atr_source = fSec(close, "") // you can change or set a separate TF if desired
atr_val    = ta.atr(14)
atr        = fSec(atr_val, "")

// Heikin Ashi
ha_close = if enable_heikinashi and i_useHeikinAshi
    fSec((open + high + low + close) / 4, "")
else
    close

// Bollinger Bands, using optional timeframe
[bb_basis_raw, bb_upper_raw, bb_lower_raw] = ta.bb(fSec(close, i_bbTF), bb_length, bb_mult)
bb_basis = bb_basis_raw
bb_upper = bb_upper_raw
bb_lower = bb_lower_raw

// MACD, using optional timeframe
macd_src    = fSec(close, i_macdTF)
[macd, signal, hist] = ta.macd(macd_src, i_macdFast, i_macdSlow, i_macdSignal)

// RSI, using optional timeframe
rsi_src = enable_heikinashi and i_useHeikinAshi ? ha_close : close
rsi_sec = fSec(rsi_src, i_rsiTF)
rsi_val = enable_rsi ? ta.rsi(rsi_sec, i_rsiLength) : 50

// Sentiment
sentiment_state = "Calm"
if enable_sentiment and i_sentimentAwareness
    vol_avg = ta.sma(volume, 14)
    vol_dev = (volume - vol_avg) / vol_avg
    if vol_dev > i_sentimentSensitivity
        sentiment_state := "Anxious"
    else if atr > ta.sma(atr, 14) * i_sentimentSensitivity
        sentiment_state := "Euphoric"
    else if vol_dev < -i_sentimentSensitivity
        sentiment_state := "Fearful"

/* ===================
   ENTRY/EXIT SIGNALS
   =================== */

rsi_signal_long  = enable_rsi ? (rsi_val < i_rsiOS) : false
rsi_signal_short = enable_rsi ? (rsi_val > i_rsiOB) : false

macd_signal_long  = enable_macd ? (macd > signal) : false
macd_signal_short = enable_macd ? (macd < signal) : false

bb_long  = enable_bbands ? (close < bb_lower) : false
bb_short = enable_bbands ? (close > bb_upper) : false

long_signal  = (rsi_signal_long or macd_signal_long or bb_long)
short_signal = (rsi_signal_short or macd_signal_short or bb_short)

var float tp_price = na
var float sl_price = na
if strategy.position_size == 0
    tp_price := close * (1 + tp_roi/100)
    sl_price := close * (1 - sl_roi/100)
else
    tp_price := strategy.position_avg_price * (1 + tp_roi/100)
    sl_price := strategy.position_avg_price * (1 - sl_roi/100)

// Entries
if long_signal and strategy.position_size == 0
    position_size = atr != 0 ? strategy.equity * 0.02 / atr : 1.0
    if position_size > 0
        strategy.entry("Long", strategy.long, qty=position_size)

if short_signal and strategy.position_size == 0
    position_size = atr != 0 ? strategy.equity * 0.02 / atr : 1.0
    if position_size > 0
        strategy.entry("Short", strategy.short, qty=position_size)

// Exits
if strategy.position_size != 0
    current_roi = (close - strategy.position_avg_price) / strategy.position_avg_price * 100

    if enable_bbands
        if strategy.position_size > 0 and close > bb_upper
            strategy.close("BB Exit Long", comment="BB Upper Band Exit")
        else if strategy.position_size < 0 and close < bb_lower
            strategy.close("BB Exit Short", comment="BB Lower Band Exit")

    if strategy.position_size > 0
        if close >= tp_price
            strategy.close("Long TP", comment="ROI: " + str.tostring(current_roi))
        else if close <= sl_price
            strategy.close("Long SL", comment="ROI: " + str.tostring(current_roi))
    else
        if close <= tp_price
            strategy.close("Short TP", comment="ROI: " + str.tostring(current_roi))
        else if close >= sl_price
            strategy.close("Short SL", comment="ROI: " + str.tostring(current_roi))

/* ===================
   VISUALIZATION
   =================== */

// Bollinger Bands
plot_style = bb_style == "Solid" ? plot.style_line : bb_style == "Dashed" ? plot.style_dashed : plot.style_dotted
plot(bb_basis, "BB Middle", color=col_bbBasis, style=plot_style, linewidth=bb_lineWidth)
plot(bb_upper, "BB Upper",  color=col_bbUpper, style=plot_style, linewidth=bb_lineWidth)
plot(bb_lower, "BB Lower",  color=col_bbLower, style=plot_style, linewidth=bb_lineWidth)
fill(plot(bb_upper, display=display.none), plot(bb_lower, display=display.none), color=color.new(col_bbBasis, 90))

// MAs
fastMA = ta.sma(close, 21)
slowMA = ta.sma(close, 55)
plot(fastMA, "Fast MA", color=col_fastMA, linewidth=ma_lineWidth)
plot(slowMA, "Slow MA", color=col_slowMA, linewidth=ma_lineWidth)

// Signals
plotshape(long_signal and strategy.position_size == 0,  "Long Signal",  shape.triangleup,   location=location.belowbar, color=color.green, size=size.small)
plotshape(short_signal and strategy.position_size == 0, "Short Signal", shape.triangledown, location=location.abovebar, color=color.red,   size=size.small)

// TP / SL
plot(strategy.position_size != 0 and not na(sl_price) ? sl_price : na, "SL Level", color=color.new(color.red, 30), style=plot.style_dashed)
plot(strategy.position_size != 0 and not na(tp_price) ? tp_price : na, "TP Level", color=color.new(color.green, 30), style=plot.style_dashed)

// Sentiment
bgcolor(
     sentiment_state == "Anxious"  ? color.new(color.orange, 90) :
     sentiment_state == "Euphoric" ? color.new(color.green, 90)  :
     sentiment_state == "Fearful"  ? color.new(color.red, 90)    : na
)