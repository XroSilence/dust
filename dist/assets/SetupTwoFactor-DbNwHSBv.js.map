{"version":3,"file":"SetupTwoFactor-DbNwHSBv.js","sources":["../../node_modules/otpauth/dist/otpauth.esm.js","../../src/pages/admin/SetupTwoFactor.jsx"],"sourcesContent":["//! otpauth 9.3.6 | (c) Héctor Molinero Fernández | MIT | https://github.com/hectorm/otpauth\n//! noble-hashes 1.6.1 | (c) Paul Miller | MIT | https://github.com/paulmillr/noble-hashes\n/// <reference types=\"./otpauth.d.ts\" />\n// @ts-nocheck\n/**\n * Converts an integer to an Uint8Array.\n * @param {number} num Integer.\n * @returns {Uint8Array} Uint8Array.\n */ const uintDecode = (num)=>{\n    const buf = new ArrayBuffer(8);\n    const arr = new Uint8Array(buf);\n    let acc = num;\n    for(let i = 7; i >= 0; i--){\n        if (acc === 0) break;\n        arr[i] = acc & 255;\n        acc -= arr[i];\n        acc /= 256;\n    }\n    return arr;\n};\n\nfunction anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error('positive integer expected, got ' + n);\n}\n// copied from utils\nfunction isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array';\n}\nfunction abytes(b, ...lengths) {\n    if (!isBytes(b)) throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\nfunction ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\nfunction aexists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nconst createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift)=>word << 32 - shift | word >>> shift;\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift)=>word << shift | word >>> 32 - shift >>> 0;\nconst isLE = /* @__PURE__ */ (()=>new Uint8Array(new Uint32Array([\n        0x11223344\n    ]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nconst byteSwap = (word)=>word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n// In place byte swap for Uint32Array\nfunction byteSwap32(arr) {\n    for(let i = 0; i < arr.length; i++){\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== 'string') throw new Error('utf8ToBytes expected string, got ' + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === 'string') data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\n\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    update(buf) {\n        aexists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        abytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        ahash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key)=>new HMAC(hash, key);\n\n/**\n * Polyfill for Safari 14\n */ function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/**\n * Choice: a ? b : c\n */ const Chi = (a, b, c)=>a & b ^ ~a & c;\n/**\n * Majority function, true if any two inputs is true\n */ const Maj = (a, b, c)=>a & b ^ a & c ^ b & c;\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */ class HashMD extends Hash {\n    update(data) {\n        aexists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n}\n\n// SHA1 (RFC 3174). It was cryptographically broken: prefer newer algorithms.\n// Initial state\nconst SHA1_IV = /* @__PURE__ */ new Uint32Array([\n    0x67452301,\n    0xefcdab89,\n    0x98badcfe,\n    0x10325476,\n    0xc3d2e1f0\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\nclass SHA1 extends HashMD {\n    get() {\n        const { A, B, C, D, E } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E\n        ];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)SHA1_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 80; i++)SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for(let i = 0; i < 80; i++){\n            let F, K;\n            if (i < 20) {\n                F = Chi(B, C, D);\n                K = 0x5a827999;\n            } else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            } else if (i < 60) {\n                F = Maj(B, C, D);\n                K = 0x8f1bbcdc;\n            } else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = rotl(A, 5) + F + E + K + SHA1_W[i] | 0;\n            E = D;\n            D = C;\n            C = rotl(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        SHA1_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n    constructor(){\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n}\n/**\n * SHA1 (RFC 3174) hash function.\n * It was cryptographically broken: prefer newer algorithms.\n * @param message - data that would be hashed\n */ const sha1 = /* @__PURE__ */ wrapConstructor(()=>new SHA1());\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per late 2024.\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends HashMD {\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E,\n            F,\n            G,\n            H\n        ];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 64; i++){\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for(let i = 0; i < 64; i++){\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = sigma0 + Maj(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T1 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T1 + T2 | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        F = F + this.F | 0;\n        G = G + this.G | 0;\n        H = H + this.H | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n    constructor(){\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor(){\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */ const sha256 = /* @__PURE__ */ wrapConstructor(()=>new SHA256());\n/**\n * SHA2-224 hash function\n */ const sha224 = /* @__PURE__ */ wrapConstructor(()=>new SHA224());\n\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n// TODO: re-check https://issues.chromium.org/issues/42212588\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for(let i = 0; i < lst.length; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l)=>l;\nconst rotr32L = (h, _l)=>h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (()=>u64.split([\n        '0x428a2f98d728ae22',\n        '0x7137449123ef65cd',\n        '0xb5c0fbcfec4d3b2f',\n        '0xe9b5dba58189dbbc',\n        '0x3956c25bf348b538',\n        '0x59f111f1b605d019',\n        '0x923f82a4af194f9b',\n        '0xab1c5ed5da6d8118',\n        '0xd807aa98a3030242',\n        '0x12835b0145706fbe',\n        '0x243185be4ee4b28c',\n        '0x550c7dc3d5ffb4e2',\n        '0x72be5d74f27b896f',\n        '0x80deb1fe3b1696b1',\n        '0x9bdc06a725c71235',\n        '0xc19bf174cf692694',\n        '0xe49b69c19ef14ad2',\n        '0xefbe4786384f25e3',\n        '0x0fc19dc68b8cd5b5',\n        '0x240ca1cc77ac9c65',\n        '0x2de92c6f592b0275',\n        '0x4a7484aa6ea6e483',\n        '0x5cb0a9dcbd41fbd4',\n        '0x76f988da831153b5',\n        '0x983e5152ee66dfab',\n        '0xa831c66d2db43210',\n        '0xb00327c898fb213f',\n        '0xbf597fc7beef0ee4',\n        '0xc6e00bf33da88fc2',\n        '0xd5a79147930aa725',\n        '0x06ca6351e003826f',\n        '0x142929670a0e6e70',\n        '0x27b70a8546d22ffc',\n        '0x2e1b21385c26c926',\n        '0x4d2c6dfc5ac42aed',\n        '0x53380d139d95b3df',\n        '0x650a73548baf63de',\n        '0x766a0abb3c77b2a8',\n        '0x81c2c92e47edaee6',\n        '0x92722c851482353b',\n        '0xa2bfe8a14cf10364',\n        '0xa81a664bbc423001',\n        '0xc24b8b70d0f89791',\n        '0xc76c51a30654be30',\n        '0xd192e819d6ef5218',\n        '0xd69906245565a910',\n        '0xf40e35855771202a',\n        '0x106aa07032bbd1b8',\n        '0x19a4c116b8d2d0c8',\n        '0x1e376c085141ab53',\n        '0x2748774cdf8eeb99',\n        '0x34b0bcb5e19b48a8',\n        '0x391c0cb3c5c95a63',\n        '0x4ed8aa4ae3418acb',\n        '0x5b9cca4f7763e373',\n        '0x682e6ff3d6b2b8a3',\n        '0x748f82ee5defb2fc',\n        '0x78a5636f43172f60',\n        '0x84c87814a1f0ab72',\n        '0x8cc702081a6439ec',\n        '0x90befffa23631e28',\n        '0xa4506cebde82bde9',\n        '0xbef9a3f7b2c67915',\n        '0xc67178f2e372532b',\n        '0xca273eceea26619c',\n        '0xd186b8c721c0c207',\n        '0xeada7dd6cde0eb1e',\n        '0xf57d4f7fee6ed178',\n        '0x06f067aa72176fba',\n        '0x0a637dc5a2c898a6',\n        '0x113f9804bef90dae',\n        '0x1b710b35131c471b',\n        '0x28db77f523047d84',\n        '0x32caab7b40c72493',\n        '0x3c9ebe0a15c9bebc',\n        '0x431d67c49c100d4c',\n        '0x4cc5d4becb3e42b6',\n        '0x597f299cfc657e2a',\n        '0x5fcb6fab3ad6faec',\n        '0x6c44198c4a475817'\n    ].map((n)=>BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends HashMD {\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [\n            Ah,\n            Al,\n            Bh,\n            Bl,\n            Ch,\n            Cl,\n            Dh,\n            Dl,\n            Eh,\n            El,\n            Fh,\n            Fl,\n            Gh,\n            Gl,\n            Hh,\n            Hl\n        ];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4){\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n        }\n        for(let i = 16; i < 80; i++){\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for(let i = 0; i < 80; i++){\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n    constructor(){\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor(){\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nconst sha512 = /* @__PURE__ */ wrapConstructor(()=>new SHA512());\nconst sha384 = /* @__PURE__ */ wrapConstructor(()=>new SHA384());\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta θ\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nclass Keccak extends Hash {\n    keccak() {\n        if (!isLE) byteSwap32(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!isLE) byteSwap32(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        aexists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        aexists(this, false);\n        abytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        anumber(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        aoutput(out, this);\n        if (this.finished) throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        anumber(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n}\nconst gen = (suffix, blockLen, outputLen)=>wrapConstructor(()=>new Keccak(blockLen, suffix, outputLen));\nconst sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */ const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nconst sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nconst sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n\n/**\n * \"globalThis\" ponyfill.\n * @see [A horrifying globalThis polyfill in universal JavaScript](https://mathiasbynens.be/notes/globalthis)\n * @type {Object.<string, *>}\n */ const globalScope = (()=>{\n    if (typeof globalThis === \"object\") return globalThis;\n    else {\n        Object.defineProperty(Object.prototype, \"__GLOBALTHIS__\", {\n            get () {\n                return this;\n            },\n            configurable: true\n        });\n        try {\n            // @ts-expect-error\n            // eslint-disable-next-line no-undef\n            if (typeof __GLOBALTHIS__ !== \"undefined\") return __GLOBALTHIS__;\n        } finally{\n            // @ts-expect-error\n            delete Object.prototype.__GLOBALTHIS__;\n        }\n    }\n    // Still unable to determine \"globalThis\", fall back to a naive method.\n    if (typeof self !== \"undefined\") return self;\n    else if (typeof window !== \"undefined\") return window;\n    else if (typeof global !== \"undefined\") return global;\n    return undefined;\n})();\n\n/**\n * @noble/hashes hash functions.\n * @type {Object.<string, sha1|sha224|sha256|sha384|sha512|sha3_224|sha3_256|sha3_384|sha3_512>}\n */ const nobleHashes = {\n    SHA1: sha1,\n    SHA224: sha224,\n    SHA256: sha256,\n    SHA384: sha384,\n    SHA512: sha512,\n    \"SHA3-224\": sha3_224,\n    \"SHA3-256\": sha3_256,\n    \"SHA3-384\": sha3_384,\n    \"SHA3-512\": sha3_512\n};\n/**\n * Canonicalizes a hash algorithm name.\n * @param {string} algorithm Hash algorithm name.\n * @returns {\"SHA1\"|\"SHA224\"|\"SHA256\"|\"SHA384\"|\"SHA512\"|\"SHA3-224\"|\"SHA3-256\"|\"SHA3-384\"|\"SHA3-512\"} Canonicalized hash algorithm name.\n */ const canonicalizeAlgorithm = (algorithm)=>{\n    switch(true){\n        case /^(?:SHA-?1|SSL3-SHA1)$/i.test(algorithm):\n            return \"SHA1\";\n        case /^SHA(?:2?-)?224$/i.test(algorithm):\n            return \"SHA224\";\n        case /^SHA(?:2?-)?256$/i.test(algorithm):\n            return \"SHA256\";\n        case /^SHA(?:2?-)?384$/i.test(algorithm):\n            return \"SHA384\";\n        case /^SHA(?:2?-)?512$/i.test(algorithm):\n            return \"SHA512\";\n        case /^SHA3-224$/i.test(algorithm):\n            return \"SHA3-224\";\n        case /^SHA3-256$/i.test(algorithm):\n            return \"SHA3-256\";\n        case /^SHA3-384$/i.test(algorithm):\n            return \"SHA3-384\";\n        case /^SHA3-512$/i.test(algorithm):\n            return \"SHA3-512\";\n        default:\n            throw new TypeError(`Unknown hash algorithm: ${algorithm}`);\n    }\n};\n/**\n * Calculates an HMAC digest.\n * @param {string} algorithm Algorithm.\n * @param {Uint8Array} key Key.\n * @param {Uint8Array} message Message.\n * @returns {Uint8Array} Digest.\n */ const hmacDigest = (algorithm, key, message)=>{\n    if (hmac) {\n        const hash = nobleHashes[algorithm] ?? nobleHashes[canonicalizeAlgorithm(algorithm)];\n        return hmac(hash, key, message);\n    } else {\n        throw new Error(\"Missing HMAC function\");\n    }\n};\n\n/**\n * RFC 4648 base32 alphabet without pad.\n * @type {string}\n */ const ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\n/**\n * Converts a base32 string to an Uint8Array (RFC 4648).\n * @see [LinusU/base32-decode](https://github.com/LinusU/base32-decode)\n * @param {string} str Base32 string.\n * @returns {Uint8Array} Uint8Array.\n */ const base32Decode = (str)=>{\n    // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n    str = str.replace(/ /g, \"\");\n    // Canonicalize to all upper case and remove padding if it exists.\n    let end = str.length;\n    while(str[end - 1] === \"=\")--end;\n    str = (end < str.length ? str.substring(0, end) : str).toUpperCase();\n    const buf = new ArrayBuffer(str.length * 5 / 8 | 0);\n    const arr = new Uint8Array(buf);\n    let bits = 0;\n    let value = 0;\n    let index = 0;\n    for(let i = 0; i < str.length; i++){\n        const idx = ALPHABET.indexOf(str[i]);\n        if (idx === -1) throw new TypeError(`Invalid character found: ${str[i]}`);\n        value = value << 5 | idx;\n        bits += 5;\n        if (bits >= 8) {\n            bits -= 8;\n            arr[index++] = value >>> bits;\n        }\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a base32 string (RFC 4648).\n * @see [LinusU/base32-encode](https://github.com/LinusU/base32-encode)\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Base32 string.\n */ const base32Encode = (arr)=>{\n    let bits = 0;\n    let value = 0;\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        value = value << 8 | arr[i];\n        bits += 8;\n        while(bits >= 5){\n            str += ALPHABET[value >>> bits - 5 & 31];\n            bits -= 5;\n        }\n    }\n    if (bits > 0) {\n        str += ALPHABET[value << 5 - bits & 31];\n    }\n    return str;\n};\n\n/**\n * Converts a hexadecimal string to an Uint8Array.\n * @param {string} str Hexadecimal string.\n * @returns {Uint8Array} Uint8Array.\n */ const hexDecode = (str)=>{\n    // Remove spaces (although they are not allowed by the spec, some issuers add them for readability).\n    str = str.replace(/ /g, \"\");\n    const buf = new ArrayBuffer(str.length / 2);\n    const arr = new Uint8Array(buf);\n    for(let i = 0; i < str.length; i += 2){\n        arr[i / 2] = parseInt(str.substring(i, i + 2), 16);\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a hexadecimal string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Hexadecimal string.\n */ const hexEncode = (arr)=>{\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        const hex = arr[i].toString(16);\n        if (hex.length === 1) str += \"0\";\n        str += hex;\n    }\n    return str.toUpperCase();\n};\n\n/**\n * Converts a Latin-1 string to an Uint8Array.\n * @param {string} str Latin-1 string.\n * @returns {Uint8Array} Uint8Array.\n */ const latin1Decode = (str)=>{\n    const buf = new ArrayBuffer(str.length);\n    const arr = new Uint8Array(buf);\n    for(let i = 0; i < str.length; i++){\n        arr[i] = str.charCodeAt(i) & 0xff;\n    }\n    return arr;\n};\n/**\n * Converts an Uint8Array to a Latin-1 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} Latin-1 string.\n */ const latin1Encode = (arr)=>{\n    let str = \"\";\n    for(let i = 0; i < arr.length; i++){\n        str += String.fromCharCode(arr[i]);\n    }\n    return str;\n};\n\n/**\n * TextEncoder instance.\n * @type {TextEncoder|null}\n */ const ENCODER = globalScope.TextEncoder ? new globalScope.TextEncoder() : null;\n/**\n * TextDecoder instance.\n * @type {TextDecoder|null}\n */ const DECODER = globalScope.TextDecoder ? new globalScope.TextDecoder() : null;\n/**\n * Converts an UTF-8 string to an Uint8Array.\n * @param {string} str String.\n * @returns {Uint8Array} Uint8Array.\n */ const utf8Decode = (str)=>{\n    if (!ENCODER) {\n        throw new Error(\"Encoding API not available\");\n    }\n    return ENCODER.encode(str);\n};\n/**\n * Converts an Uint8Array to an UTF-8 string.\n * @param {Uint8Array} arr Uint8Array.\n * @returns {string} String.\n */ const utf8Encode = (arr)=>{\n    if (!DECODER) {\n        throw new Error(\"Encoding API not available\");\n    }\n    return DECODER.decode(arr);\n};\n\n/**\n * Returns random bytes.\n * @param {number} size Size.\n * @returns {Uint8Array} Random bytes.\n */ const randomBytes = (size)=>{\n    if (globalScope.crypto?.getRandomValues) {\n        return globalScope.crypto.getRandomValues(new Uint8Array(size));\n    } else {\n        throw new Error(\"Cryptography API not available\");\n    }\n};\n\n/**\n * OTP secret key.\n */ class Secret {\n    /**\n   * Converts a Latin-1 string to a Secret object.\n   * @param {string} str Latin-1 string.\n   * @returns {Secret} Secret object.\n   */ static fromLatin1(str) {\n        return new Secret({\n            buffer: latin1Decode(str).buffer\n        });\n    }\n    /**\n   * Converts an UTF-8 string to a Secret object.\n   * @param {string} str UTF-8 string.\n   * @returns {Secret} Secret object.\n   */ static fromUTF8(str) {\n        return new Secret({\n            buffer: utf8Decode(str).buffer\n        });\n    }\n    /**\n   * Converts a base32 string to a Secret object.\n   * @param {string} str Base32 string.\n   * @returns {Secret} Secret object.\n   */ static fromBase32(str) {\n        return new Secret({\n            buffer: base32Decode(str).buffer\n        });\n    }\n    /**\n   * Converts a hexadecimal string to a Secret object.\n   * @param {string} str Hexadecimal string.\n   * @returns {Secret} Secret object.\n   */ static fromHex(str) {\n        return new Secret({\n            buffer: hexDecode(str).buffer\n        });\n    }\n    /**\n   * Secret key buffer.\n   * @deprecated For backward compatibility, the \"bytes\" property should be used instead.\n   * @type {ArrayBufferLike}\n   */ get buffer() {\n        return this.bytes.buffer;\n    }\n    /**\n   * Latin-1 string representation of secret key.\n   * @type {string}\n   */ get latin1() {\n        Object.defineProperty(this, \"latin1\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: latin1Encode(this.bytes)\n        });\n        return this.latin1;\n    }\n    /**\n   * UTF-8 string representation of secret key.\n   * @type {string}\n   */ get utf8() {\n        Object.defineProperty(this, \"utf8\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: utf8Encode(this.bytes)\n        });\n        return this.utf8;\n    }\n    /**\n   * Base32 string representation of secret key.\n   * @type {string}\n   */ get base32() {\n        Object.defineProperty(this, \"base32\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: base32Encode(this.bytes)\n        });\n        return this.base32;\n    }\n    /**\n   * Hexadecimal string representation of secret key.\n   * @type {string}\n   */ get hex() {\n        Object.defineProperty(this, \"hex\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: hexEncode(this.bytes)\n        });\n        return this.hex;\n    }\n    /**\n   * Creates a secret key object.\n   * @param {Object} [config] Configuration options.\n   * @param {ArrayBufferLike} [config.buffer] Secret key buffer.\n   * @param {number} [config.size=20] Number of random bytes to generate, ignored if 'buffer' is provided.\n   */ constructor({ buffer, size = 20 } = {}){\n        /**\n     * Secret key.\n     * @type {Uint8Array}\n     * @readonly\n     */ this.bytes = typeof buffer === \"undefined\" ? randomBytes(size) : new Uint8Array(buffer);\n        // Prevent the \"bytes\" property from being modified.\n        Object.defineProperty(this, \"bytes\", {\n            enumerable: true,\n            writable: false,\n            configurable: false,\n            value: this.bytes\n        });\n    }\n}\n\n/**\n * Returns true if a is equal to b, without leaking timing information that would allow an attacker to guess one of the values.\n * @param {string} a String a.\n * @param {string} b String b.\n * @returns {boolean} Equality result.\n */ const timingSafeEqual = (a, b)=>{\n    {\n        if (a.length !== b.length) {\n            throw new TypeError(\"Input strings must have the same length\");\n        }\n        let i = -1;\n        let out = 0;\n        while(++i < a.length){\n            out |= a.charCodeAt(i) ^ b.charCodeAt(i);\n        }\n        return out === 0;\n    }\n};\n\n/**\n * HOTP: An HMAC-based One-time Password Algorithm.\n * @see [RFC 4226](https://datatracker.ietf.org/doc/html/rfc4226)\n */ class HOTP {\n    /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   counter: number\n   *   window: number\n   * }}\n   */ static get defaults() {\n        return {\n            issuer: \"\",\n            label: \"OTPAuth\",\n            issuerInLabel: true,\n            algorithm: \"SHA1\",\n            digits: 6,\n            counter: 0,\n            window: 1\n        };\n    }\n    /**\n   * Generates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @returns {string} Token.\n   */ static generate({ secret, algorithm = HOTP.defaults.algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter }) {\n        const digest = hmacDigest(algorithm, secret.bytes, uintDecode(counter));\n        const offset = digest[digest.byteLength - 1] & 15;\n        const otp = ((digest[offset] & 127) << 24 | (digest[offset + 1] & 255) << 16 | (digest[offset + 2] & 255) << 8 | digest[offset + 3] & 255) % 10 ** digits;\n        return otp.toString().padStart(digits, \"0\");\n    }\n    /**\n   * Generates an HOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.counter=this.counter++] Counter value.\n   * @returns {string} Token.\n   */ generate({ counter = this.counter++ } = {}) {\n        return HOTP.generate({\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            counter\n        });\n    }\n    /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ static validate({ token, secret, algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter, window = HOTP.defaults.window }) {\n        // Return early if the token length does not match the digit number.\n        if (token.length !== digits) return null;\n        let delta = null;\n        const check = (/** @type {number} */ i)=>{\n            const generatedToken = HOTP.generate({\n                secret,\n                algorithm,\n                digits,\n                counter: i\n            });\n            if (timingSafeEqual(token, generatedToken)) {\n                delta = i - counter;\n            }\n        };\n        check(counter);\n        for(let i = 1; i <= window && delta === null; ++i){\n            check(counter - i);\n            if (delta !== null) break;\n            check(counter + i);\n            if (delta !== null) break;\n        }\n        return delta;\n    }\n    /**\n   * Validates an HOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.counter=this.counter] Counter value.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ validate({ token, counter = this.counter, window }) {\n        return HOTP.validate({\n            token,\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            counter,\n            window\n        });\n    }\n    /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */ toString() {\n        const e = encodeURIComponent;\n        return \"otpauth://hotp/\" + `${this.issuer.length > 0 ? this.issuerInLabel ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?`}` + `secret=${e(this.secret.base32)}&` + `algorithm=${e(this.algorithm)}&` + `digits=${e(this.digits)}&` + `counter=${e(this.counter)}`;\n    }\n    /**\n   * Creates an HOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.counter=0] Initial counter value.\n   */ constructor({ issuer = HOTP.defaults.issuer, label = HOTP.defaults.label, issuerInLabel = HOTP.defaults.issuerInLabel, secret = new Secret(), algorithm = HOTP.defaults.algorithm, digits = HOTP.defaults.digits, counter = HOTP.defaults.counter } = {}){\n        /**\n     * Account provider.\n     * @type {string}\n     */ this.issuer = issuer;\n        /**\n     * Account label.\n     * @type {string}\n     */ this.label = label;\n        /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */ this.issuerInLabel = issuerInLabel;\n        /**\n     * Secret key.\n     * @type {Secret}\n     */ this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n        /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */ this.algorithm = canonicalizeAlgorithm(algorithm);\n        /**\n     * Token length.\n     * @type {number}\n     */ this.digits = digits;\n        /**\n     * Initial counter value.\n     * @type {number}\n     */ this.counter = counter;\n    }\n}\n\n/**\n * TOTP: Time-Based One-Time Password Algorithm.\n * @see [RFC 6238](https://datatracker.ietf.org/doc/html/rfc6238)\n */ class TOTP {\n    /**\n   * Default configuration.\n   * @type {{\n   *   issuer: string,\n   *   label: string,\n   *   issuerInLabel: boolean,\n   *   algorithm: string,\n   *   digits: number,\n   *   period: number\n   *   window: number\n   * }}\n   */ static get defaults() {\n        return {\n            issuer: \"\",\n            label: \"OTPAuth\",\n            issuerInLabel: true,\n            algorithm: \"SHA1\",\n            digits: 6,\n            period: 30,\n            window: 1\n        };\n    }\n    /**\n   * Generates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */ static generate({ secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now() }) {\n        return HOTP.generate({\n            secret,\n            algorithm,\n            digits,\n            counter: Math.floor(timestamp / 1000 / period)\n        });\n    }\n    /**\n   * Generates a TOTP token.\n   * @param {Object} [config] Configuration options.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @returns {string} Token.\n   */ generate({ timestamp = Date.now() } = {}) {\n        return TOTP.generate({\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            period: this.period,\n            timestamp\n        });\n    }\n    /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {Secret} config.secret Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ static validate({ token, secret, algorithm, digits, period = TOTP.defaults.period, timestamp = Date.now(), window }) {\n        return HOTP.validate({\n            token,\n            secret,\n            algorithm,\n            digits,\n            counter: Math.floor(timestamp / 1000 / period),\n            window\n        });\n    }\n    /**\n   * Validates a TOTP token.\n   * @param {Object} config Configuration options.\n   * @param {string} config.token Token value.\n   * @param {number} [config.timestamp=Date.now] Timestamp value in milliseconds.\n   * @param {number} [config.window=1] Window of counter values to test.\n   * @returns {number|null} Token delta or null if it is not found in the search window, in which case it should be considered invalid.\n   */ validate({ token, timestamp, window }) {\n        return TOTP.validate({\n            token,\n            secret: this.secret,\n            algorithm: this.algorithm,\n            digits: this.digits,\n            period: this.period,\n            timestamp,\n            window\n        });\n    }\n    /**\n   * Returns a Google Authenticator key URI.\n   * @returns {string} URI.\n   */ toString() {\n        const e = encodeURIComponent;\n        return \"otpauth://totp/\" + `${this.issuer.length > 0 ? this.issuerInLabel ? `${e(this.issuer)}:${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?issuer=${e(this.issuer)}&` : `${e(this.label)}?`}` + `secret=${e(this.secret.base32)}&` + `algorithm=${e(this.algorithm)}&` + `digits=${e(this.digits)}&` + `period=${e(this.period)}`;\n    }\n    /**\n   * Creates a TOTP object.\n   * @param {Object} [config] Configuration options.\n   * @param {string} [config.issuer=''] Account provider.\n   * @param {string} [config.label='OTPAuth'] Account label.\n   * @param {boolean} [config.issuerInLabel=true] Include issuer prefix in label.\n   * @param {Secret|string} [config.secret=Secret] Secret key.\n   * @param {string} [config.algorithm='SHA1'] HMAC hashing algorithm.\n   * @param {number} [config.digits=6] Token length.\n   * @param {number} [config.period=30] Token time-step duration.\n   */ constructor({ issuer = TOTP.defaults.issuer, label = TOTP.defaults.label, issuerInLabel = TOTP.defaults.issuerInLabel, secret = new Secret(), algorithm = TOTP.defaults.algorithm, digits = TOTP.defaults.digits, period = TOTP.defaults.period } = {}){\n        /**\n     * Account provider.\n     * @type {string}\n     */ this.issuer = issuer;\n        /**\n     * Account label.\n     * @type {string}\n     */ this.label = label;\n        /**\n     * Include issuer prefix in label.\n     * @type {boolean}\n     */ this.issuerInLabel = issuerInLabel;\n        /**\n     * Secret key.\n     * @type {Secret}\n     */ this.secret = typeof secret === \"string\" ? Secret.fromBase32(secret) : secret;\n        /**\n     * HMAC hashing algorithm.\n     * @type {string}\n     */ this.algorithm = canonicalizeAlgorithm(algorithm);\n        /**\n     * Token length.\n     * @type {number}\n     */ this.digits = digits;\n        /**\n     * Token time-step duration.\n     * @type {number}\n     */ this.period = period;\n    }\n}\n\n/**\n * Key URI regex (otpauth://TYPE/[ISSUER:]LABEL?PARAMETERS).\n * @type {RegExp}\n */ const OTPURI_REGEX = /^otpauth:\\/\\/([ht]otp)\\/(.+)\\?([A-Z0-9.~_-]+=[^?&]*(?:&[A-Z0-9.~_-]+=[^?&]*)*)$/i;\n/**\n * RFC 4648 base32 alphabet with pad.\n * @type {RegExp}\n */ const SECRET_REGEX = /^[2-7A-Z]+=*$/i;\n/**\n * Regex for supported algorithms.\n * @type {RegExp}\n */ const ALGORITHM_REGEX = /^SHA(?:1|224|256|384|512|3-224|3-256|3-384|3-512)$/i;\n/**\n * Integer regex.\n * @type {RegExp}\n */ const INTEGER_REGEX = /^[+-]?\\d+$/;\n/**\n * Positive integer regex.\n * @type {RegExp}\n */ const POSITIVE_INTEGER_REGEX = /^\\+?[1-9]\\d*$/;\n/**\n * HOTP/TOTP object/string conversion.\n * @see [Key URI Format](https://github.com/google/google-authenticator/wiki/Key-Uri-Format)\n */ class URI {\n    /**\n   * Parses a Google Authenticator key URI and returns an HOTP/TOTP object.\n   * @param {string} uri Google Authenticator Key URI.\n   * @returns {HOTP|TOTP} HOTP/TOTP object.\n   */ static parse(uri) {\n        let uriGroups;\n        try {\n            uriGroups = uri.match(OTPURI_REGEX);\n        // eslint-disable-next-line no-unused-vars\n        } catch (_) {\n        /* Handled below */ }\n        if (!Array.isArray(uriGroups)) {\n            throw new URIError(\"Invalid URI format\");\n        }\n        // Extract URI groups.\n        const uriType = uriGroups[1].toLowerCase();\n        const uriLabel = uriGroups[2].split(/(?::|%3A) *(.+)/i, 2).map(decodeURIComponent);\n        /** @type {Object.<string, string>} */ const uriParams = uriGroups[3].split(\"&\").reduce((acc, cur)=>{\n            const pairArr = cur.split(/=(.*)/, 2).map(decodeURIComponent);\n            const pairKey = pairArr[0].toLowerCase();\n            const pairVal = pairArr[1];\n            /** @type {Object.<string, string>} */ const pairAcc = acc;\n            pairAcc[pairKey] = pairVal;\n            return pairAcc;\n        }, {});\n        // 'OTP' will be instantiated with 'config' argument.\n        let OTP;\n        const config = {};\n        if (uriType === \"hotp\") {\n            OTP = HOTP;\n            // Counter: required\n            if (typeof uriParams.counter !== \"undefined\" && INTEGER_REGEX.test(uriParams.counter)) {\n                config.counter = parseInt(uriParams.counter, 10);\n            } else {\n                throw new TypeError(\"Missing or invalid 'counter' parameter\");\n            }\n        } else if (uriType === \"totp\") {\n            OTP = TOTP;\n            // Period: optional\n            if (typeof uriParams.period !== \"undefined\") {\n                if (POSITIVE_INTEGER_REGEX.test(uriParams.period)) {\n                    config.period = parseInt(uriParams.period, 10);\n                } else {\n                    throw new TypeError(\"Invalid 'period' parameter\");\n                }\n            }\n        } else {\n            throw new TypeError(\"Unknown OTP type\");\n        }\n        // Label: required\n        // Issuer: optional\n        if (typeof uriParams.issuer !== \"undefined\") {\n            config.issuer = uriParams.issuer;\n        }\n        if (uriLabel.length === 2) {\n            config.label = uriLabel[1];\n            if (typeof config.issuer === \"undefined\" || config.issuer === \"\") {\n                config.issuer = uriLabel[0];\n            } else if (uriLabel[0] === \"\") {\n                config.issuerInLabel = false;\n            }\n        } else {\n            config.label = uriLabel[0];\n            if (typeof config.issuer !== \"undefined\" && config.issuer !== \"\") {\n                config.issuerInLabel = false;\n            }\n        }\n        // Secret: required\n        if (typeof uriParams.secret !== \"undefined\" && SECRET_REGEX.test(uriParams.secret)) {\n            config.secret = uriParams.secret;\n        } else {\n            throw new TypeError(\"Missing or invalid 'secret' parameter\");\n        }\n        // Algorithm: optional\n        if (typeof uriParams.algorithm !== \"undefined\") {\n            if (ALGORITHM_REGEX.test(uriParams.algorithm)) {\n                config.algorithm = uriParams.algorithm;\n            } else {\n                throw new TypeError(\"Invalid 'algorithm' parameter\");\n            }\n        }\n        // Digits: optional\n        if (typeof uriParams.digits !== \"undefined\") {\n            if (POSITIVE_INTEGER_REGEX.test(uriParams.digits)) {\n                config.digits = parseInt(uriParams.digits, 10);\n            } else {\n                throw new TypeError(\"Invalid 'digits' parameter\");\n            }\n        }\n        return new OTP(config);\n    }\n    /**\n   * Converts an HOTP/TOTP object to a Google Authenticator key URI.\n   * @param {HOTP|TOTP} otp HOTP/TOTP object.\n   * @returns {string} Google Authenticator Key URI.\n   */ static stringify(otp) {\n        if (otp instanceof HOTP || otp instanceof TOTP) {\n            return otp.toString();\n        }\n        throw new TypeError(\"Invalid 'HOTP/TOTP' object\");\n    }\n}\n\n/**\n * Library version.\n * @type {string}\n */ const version = \"9.3.6\";\n\nexport { HOTP, Secret, TOTP, URI, version };\n","// src/pages/admin/SetupTwoFactor.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport * as OTPAuth from 'otpauth';\r\nimport { QRCodeCanvas } from 'qrcode.react';\r\n\r\nexport default function SetupTwoFactor() {\r\n    const [qrCode, setQrCode] = useState('');\r\n    const [secret, setSecret] = useState('');\r\n    const [verificationCode, setVerificationCode] = useState('');\r\n    const [isSetup, setIsSetup] = useState(localStorage.getItem('twoFactorSetup'));\r\n\r\n    useEffect(() => {\r\n        if (!isSetup) {\r\n            // Generate new TOTP secret\r\n            const totp = new OTPAuth.TOTP({\r\n                issuer: \"DustUp Admin\",\r\n                label: import.meta.env.VITE_ADMIN_USERNAME,\r\n                algorithm: \"SHA1\",\r\n                digits: 6,\r\n                period: 30,\r\n                secret: OTPAuth.Secret.random()\r\n            });\r\n\r\n            setSecret(totp.secret.base32);\r\n            setQrCode(totp.toString());\r\n        }\r\n    }, []);\r\n\r\n    const verifySetup = () => {\r\n        const totp = new OTPAuth.TOTP({\r\n            issuer: \"DustUp Admin\",\r\n            label: import.meta.env.VITE_ADMIN_USERNAME,\r\n            algorithm: \"SHA1\",\r\n            digits: 6,\r\n            period: 30,\r\n            secret: secret\r\n        });\r\n\r\n        if (totp.validate({ token: verificationCode, window: 1 }) !== null) {\r\n            localStorage.setItem('twoFactorSetup', 'true');\r\n            localStorage.setItem('twoFactorSecret', secret);\r\n            setIsSetup(true);\r\n        } else {\r\n            alert('Invalid verification code');\r\n        }\r\n    };\r\n\r\n    const navigate = useNavigate();\r\n\r\n    if (isSetup) {\r\n        navigate('/admin/dashboard');\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-slate-900\">\r\n            <div className=\"bg-slate-800 p-8 rounded-lg text-white\">\r\n                <h2 className=\"text-xl mb-4\">Setup Two-Factor Authentication</h2>\r\n                <div className=\"mb-4\">\r\n                    <QRCodeCanvas value={qrCode} size={200} />\r\n                </div>\r\n                <p className=\"mb-4\">Or enter this secret manually: {secret}</p>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter verification code\"\r\n                    onChange={(e) => setVerificationCode(e.target.value)}\r\n                    className=\"mb-4 p-2 w-full rounded text-black\"\r\n                />\r\n            <button\r\n                onClick={verifySetup}\r\n                className=\"w-full bg-blue-500 p-2 rounded\"\r\n            >\r\n                Verify and Enable 2FA\r\n            </button>\r\n        </div>\r\n    </div>\r\n);\r\n}\r\n"],"names":["uintDecode","num","buf","arr","acc","i","anumber","n","isBytes","a","abytes","b","lengths","ahash","h","aexists","instance","checkFinished","aoutput","out","min","u32","createView","rotr","word","shift","rotl","isLE","byteSwap","byteSwap32","utf8ToBytes","str","toBytes","data","Hash","wrapConstructor","hashCons","hashC","msg","tmp","HMAC","to","oHash","iHash","finished","destroyed","blockLen","outputLen","hash","_key","key","pad","hmac","message","setBigUint64","view","byteOffset","value","_32n","_u32_max","wh","wl","Chi","c","Maj","HashMD","buffer","len","pos","take","dataView","oview","outLen","state","res","length","padOffset","SHA1_IV","SHA1_W","SHA1","A","B","C","D","E","offset","F","K","T","sha1","SHA256_K","SHA256_IV","SHA256_W","SHA256","G","H","W15","W2","s0","s1","sigma1","T1","T2","SHA224","sha256","sha224","U32_MASK64","fromBig","le","split","lst","Ah","Al","l","toBig","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA384","sha512","sha384","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","s","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","bufferOut","bytes","enableXOF","gen","sha3_224","sha3_256","sha3_384","sha3_512","globalScope","nobleHashes","canonicalizeAlgorithm","algorithm","hmacDigest","ALPHABET","base32Decode","end","bits","index","idx","base32Encode","hexDecode","hexEncode","hex","latin1Decode","latin1Encode","ENCODER","DECODER","utf8Decode","utf8Encode","randomBytes","size","_a","Secret","timingSafeEqual","HOTP","secret","digits","counter","digest","token","window","delta","check","generatedToken","e","issuer","label","issuerInLabel","TOTP","period","timestamp","SetupTwoFactor","qrCode","setQrCode","useState","setSecret","verificationCode","setVerificationCode","isSetup","setIsSetup","useEffect","totp","OTPAuth.TOTP","OTPAuth.Secret","verifySetup","navigate","useNavigate","jsxs","jsx","QRCodeCanvas"],"mappings":"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","x_google_ignoreList":[0]}